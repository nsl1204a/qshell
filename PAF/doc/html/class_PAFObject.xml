<?xml version="1.0"?><phpdoc><class name="PAFObject" extends="PEAR" undoc="false" access="private" package="PAF"><file>D:\wwwroot\web\private\class\php\PAF/PAFObject.php</file><doc><author>Sergio Cruz scruz@prisacom.com</author><description>Extiende las capacidades de la clase PEAR con un identificador único de clase así como un nombrepara la clase y proporciona los métodos para comprobar si una clase es de un tipo determinado. Lasclases que deriven de PAFObject deberán sobreescribir este método para que realize las comprobacionesadecuadas consigo misma y con la clase padre de la que deriva.</description><shortdescription>Clase base de la jerarquía de objetos PAF.</shortdescription><version>$Revision: 1.4 $</version></doc><function name="PAFObject" undoc="false" access="public"><doc><parameter name="$errorClass" default="null" type="string">Nombre de la clase de Error utilizada para el lanzamiento de errores.</parameter><return type="void"/><description>NOTA: El constructor de la clase padre PEAR admite como parámetro un string que designael nombre de la clase de error que va a lanzar la clase en caso de que se produzca alguno.El método utilizado por las clases derivadas de PEAR para el lanzamiento de errores esraiseError. Este método crea y devuelve una nueva instancia de la clase que se ha especificado enel constructor. Hay que echarle un ojo a esto a ver qué tal.</description><shortdescription>Constructor de la clase PAFObject.</shortdescription></doc></function><function name="getClassType" undoc="false" access="public"><doc><return name="" type="int">Código único de clase.</return><description/><shortdescription>Método estático para recuperar el identificador de la clase.</shortdescription></doc></function><function name="getClassName" undoc="false" access="public"><doc><return name="" type="string">Nombre de la clase.</return><description/><shortdescription>Método estático que retorna el nombre de la clase.</shortdescription></doc></function><function name="isTypeOf" undoc="false" access="public"><doc><parameter name="$tipo" type="int">Código de clase por el que queremos preguntar .</parameter><return name="" type="boolean">TRUE si la clase se es del tipo indicado o derivada y FALSE en caso contrario.</return><description>Toda clase derivada de PAFObject debe sobreescribir este método de tal formaque se pregunte por el tipo pasado por parámetro a sí misma y si no pregunte alpadre inmediatamente superior. En el caso de PAFObject como se trata de la clasepadre de todas no se redirige la pregunta a ninguna. La comparación se realiza en baseal id de clase que se ha definido mediante la función &amp;quot;define&amp;quot; al principio del fichero.</description><shortdescription>Método de consulta para determinar si una clase es de un tipo determinado.</shortdescription></doc></function><constant name="CLASS_PAFOBJECT" undoc="false" access="private" case="default: case sensitive">1<doc><description/><shortdescription/></doc></constant><subclasses><subclass>PAFAnchor</subclass><subclass>PAFSAXDocumentHandler</subclass><subclass>PAFOutput</subclass><subclass>PAFConfiguration</subclass><subclass>PAFHeader</subclass><subclass>PAFMetadata</subclass><subclass>PAFOptionAnchor</subclass><subclass>PAFRecordData</subclass><subclass>PAFRecordset</subclass><subclass>PAFSAXParser</subclass><subclass>PAFSession</subclass><subclass>PAFTemplate</subclass><subclass>PAFIniFile</subclass><subclass>PAFDataSource</subclass></subclasses></class></phpdoc>